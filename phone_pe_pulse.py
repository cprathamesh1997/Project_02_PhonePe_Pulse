# -*- coding: utf-8 -*-
"""Phone_pe_pulse.ipynb

Automatically generated by Colaboratory.



# **Phonepe Pulse Data Visualization and Exploration**

***Clone_the_required_github_repository***[Phone pe Pulse]
"""

!git clone https://github.com/PhonePe/pulse.git
import pandas as pd
import json
import os

"""#***For_Aggregated_data***"""

#Import_Required libraries for the program

import pandas as pd
import json
import os

#For_aggregated_transaction_data as states

#Path to get the data as states

path="/content/pulse/data/aggregated/transaction/country/india/state/"
Agg_state=os.listdir(path) #To get the list of states in India



#To extract the data and sub_data to create a dataframe

CL={'State':[], 'Year':[],'Quarter':[],'Txn_type':[], 'Txn_count':[], 'Txn_amount':[]}

for i in Agg_state:
    a_i=path+i+"/"
    Agg_year=os.listdir(a_i)    
    
    for j in Agg_year:
        a_j=a_i+j+"/"
        Agg_year_list=os.listdir(a_j)        
        
        for k in Agg_year_list:
            a_k=a_j+k
            Data=open(a_k,'r')
            D=json.load(Data)
            
            for z in D['data']['transactionData']:
              Name=z['name']
              count = z['paymentInstruments'][0]['count']
              amount = z['paymentInstruments'][0]['amount']
              
              CL['Txn_type'].append(Name)
              CL['Txn_count'].append(count)
              CL['Txn_amount'].append(amount)
              CL['State'].append(i)
              CL['Year'].append(j)
              CL['Quarter'].append(int(k.strip('.json')))


pd.DataFrame(CL) #Succesfully created a dataframe

# Inserting the dataframe into a sqlite database

import sqlite3
connect = sqlite3.connect('Phonepe_pulse.db')
C = connect.cursor()

#create a table in the database
C.execute('''CREATE TABLE IF NOT EXISTS agg_transaction(
            State TEXT,
            Year INT,
            Quarter INT,
            Transaction_type TEXT,
            Transaction_count INT,
            Transaction_amount BIGINT
            )''')

#Insert the data into the table
C.executemany('INSERT INTO agg_transaction VALUES(?,?,?,?,?,?)', zip(CL['State'], CL['Year'], CL['Quarter'], CL['Txn_type'], CL['Txn_count'], CL['Txn_amount']))

#show the data from the table
x = C.execute("SELECT * FROM agg_transaction")
x_data = C.fetchall()
for row in x_data:
    print(row)

#For_aggregated_user_data as states

path="/content/pulse/data/aggregated/user/country/india/state/"
Agg_user_state=os.listdir(path)



#To extract the data and Sub_data to create a dataframe

DL={'State':[], 'Year':[],'Quarter':[],'Brand_type':[], 'Users_count':[], 'Percentage':[]}

for i in Agg_user_state:
    p_i=path+i+"/"
    Agg_user_year=os.listdir(p_i)    
    
    for j in Agg_user_year:
        p_j=p_i+j+"/"
        Agg_user_year_list=os.listdir(p_j)        
        
        for k in Agg_user_year_list:
            p_k=p_j+k
            Data=open(p_k,'r')
            B=json.load(Data)
            
            if B['data'].get("usersByDevice") is not None:
                
                for z in B['data']["usersByDevice"]:
                 brand = z['brand']
                 count = z['count']
                 percen = z['percentage']
                 
                 DL['Brand_type'].append(brand)
                 DL['Users_count'].append(count)
                 DL['Percentage'].append(percen)
                 DL['State'].append(i)
                 DL['Year'].append(j)
                 DL['Quarter'].append(int(k.strip('.json')))


pd.DataFrame(DL)

#create a table in the database
C.execute('''CREATE TABLE IF NOT EXISTS agg_users(
            State TEXT,
            Year INT,
            Quarter INT,
            Brand_type TEXT,
            Users_count INT,
            Percentage FLOAT
            )''')

#insert the data into the table
C.executemany('INSERT INTO agg_users VALUES(?,?,?,?,?,?)', zip(DL['State'], DL['Year'], DL['Quarter'], DL['Brand_type'], DL['Users_count'], DL['Percentage']))

#show the data in the table
x = C.execute("SELECT * FROM agg_users")
x_data = C.fetchall()
for row in x_data:
    print(row)

"""#***For_Map_data***

"""

#For_map_transaction_data as states

#Path to get the data as states from map/transaction folder

path="/content/pulse/data/map/transaction/hover/country/india/state/"
map_state=os.listdir(path)


#To extract the data and sub_data to create a dataframe

AL={'State':[], 'Year':[],'Quarter':[],'Region_name':[], 'Txn_count':[], 'Txn_amount':[]}

for i in map_state:
    a_i=path+i+"/"
    map_year=os.listdir(a_i)    
    
    for j in map_year:
        a_j=a_i+j+"/"
        map_year_list=os.listdir(a_j)        
        
        for k in map_year_list:
            a_k=a_j+k
            Data=open(a_k,'r')
            A=json.load(Data)
            
            for z in A['data']["hoverDataList"]:
              Name=z['name']
              count = z["metric"][0]['count']
              amount = z["metric"][0]['amount']
              
              AL['Region_name'].append(Name)
              AL['Txn_count'].append(count)
              AL['Txn_amount'].append(amount)
              AL['State'].append(i)
              AL['Year'].append(j)
              AL['Quarter'].append(int(k.strip('.json')))

#Created a dataframe
pd.DataFrame(AL)

#create a table in the database
C.execute('''CREATE TABLE IF NOT EXISTS map_transaction(
            State TEXT,
            Year INT,
            Quarter INT,
            Region_name TEXT,
            Txn_count INT,
            Txn_amount BIGINT
            )''')

#insert the data into the table
C.executemany('INSERT INTO map_transaction VALUES(?,?,?,?,?,?)', zip(AL['State'], AL['Year'], AL['Quarter'], AL['Region_name'], AL['Txn_count'], AL['Txn_amount']))

#show the data in the table
x = C.execute("SELECT * FROM map_transaction")
x_data = C.fetchall()
for row in x_data:
    print(row)

#For_map_user_data as states
#Following_is_the_path_for_data

path="/content/pulse/data/map/user/hover/country/india/state/"
map_user_state=os.listdir(path)

#To extract the data and sub_data to create a dataframe

BL={'State':[], 'Year':[],'Quarter':[],'Reg_name':[], 'Reg_users':[]}

for i in map_user_state:
    p_i=path+i+"/"
    map_user_year=os.listdir(p_i)    
    
    for j in Agg_user_year:
        p_j=p_i+j+"/"
        map_user_year_list=os.listdir(p_j)        
        
        for k in map_user_year_list:
            p_k=p_j+k
            Data=open(p_k,'r')
            B=json.load(Data)
        
        for z in B['data']["hoverData"]:
                 region_name = z
                 reg_users = B['data']["hoverData"][z]['registeredUsers']
                 appOpens = B['data']["hoverData"][z]['appOpens']
                 
                 BL['Reg_name'].append(region_name)
                 BL['Reg_users'].append(reg_users)
                 BL['State'].append(i)
                 BL['Year'].append(j)
                 BL['Quarter'].append(int(k.strip('.json')))

#Created a dataframe
pd.DataFrame(BL)

#create a table in the database

C.execute('''CREATE TABLE IF NOT EXISTS map_users(
            State TEXT,
            Year INT,
            Quarter INT,
            Reg_name TEXT,
            Reg_users BIGINT
             )''')

#Insert the data into the table
C.executemany('INSERT INTO map_users VALUES(?,?,?,?,?)', zip(BL['State'], BL['Year'], BL['Quarter'], BL['Reg_name'], BL['Reg_users']))

#show the data FROM the table
x = C.execute("SELECT * FROM map_users")
x_data = C.fetchall()
for row in x_data:
    print(row)

"""# ***For_Top_data***"""

#For_TOP_transaction_data as states

#Path to get the data as states from top/transaction folder

path="/content/pulse/data/top/transaction/country/india/state/"
top_state=os.listdir(path)

#To extract the data and sub_data to create a dataframe

KL={'State':[], 'Year':[],'Quarter':[],'District_name':[], 'Txn_count':[], 'Txn_amount':[]}

for i in top_state:
    p_i=path+i+"/"
    top_year=os.listdir(p_i)    
    
    for j in top_year:
        p_j=p_i+j+"/"
        top_year_list=os.listdir(p_j)        
        
        for k in top_year_list:
            p_k=p_j+k
            Data=open(p_k,'r')
            K=json.load(Data)
            
            for z in K['data']["districts"]:
              D_Name=z["entityName"]
              count = z['metric']['count']
              amount = z['metric']['amount']
              
              KL['District_name'].append(D_Name)
              KL['Txn_count'].append(count)
              KL['Txn_amount'].append(amount)
              KL['State'].append(i)
              KL['Year'].append(j)
              KL['Quarter'].append(int(k.strip('.json')))

#Created a dataframe
pd.DataFrame(KL)

#create a table in the database
C.execute('''CREATE TABLE IF NOT EXISTS top_transaction(
            State TEXT,
            Year INT,
            Quarter INT,
            District_name TEXT,
            Txn_count INT,
            Txn_amount BIGINT
            )''')

#Insert the data into the table
C.executemany('INSERT INTO top_transaction VALUES(?,?,?,?,?,?)', zip(CL['State'], KL['Year'], KL['Quarter'], KL['District_name'], KL['Txn_count'], KL['Txn_amount']))

#For_TOP_user_data as states

#Path_for_the_data

path="/content/pulse/data/top/user/country/india/state/"
top_user_state=os.listdir(path)
top_user_state


#To extract the data to create a dataframe

JL={'State':[], 'Year':[],'Quarter':[],'Reg_name':[], 'Reg_users':[]}

for i in top_user_state:
    p_i=path+i+"/"
    top_user_year=os.listdir(p_i)    
    
    for j in top_user_year:
        p_j=p_i+j+"/"
        top_user_year_list=os.listdir(p_j)        
        
        for k in top_user_year_list:
            p_k=p_j+k
            Data=open(p_k,'r')
            J=json.load(Data)
        
        for z in J['data']['districts']:
                 region_name = z['name']
                 reg_users = z['registeredUsers']
                 JL['Reg_name'].append(region_name)
                 JL['Reg_users'].append(reg_users)
                 JL['State'].append(i)
                 JL['Year'].append(j)
                 JL['Quarter'].append(int(k.strip('.json')))
#Created a dataframe
pd.DataFrame(JL)

#create a table in the database
C.execute('''CREATE TABLE IF NOT EXISTS top_users(
            State TEXT,
            Year INT,
            Quarter INT
            Reg_name TEXT,
            Reg_users INT
             )''')

#insert the data into the table
C.executemany('INSERT INTO top_users VALUES(?,?,?,?,?)', zip(BL['State'], BL['Year'], BL['Quarter'], BL['Reg_name'], BL['Reg_users']))

#show the data in the table
x = C.execute("SELECT * FROM top_users")
x_data = C.fetchall()
for row in x_data:
    print(row)

!pip install streamlit

!./ngrok authtokens 2Lb7nKJVe0k542wdclYWapnyfux_4nJurZjAiNAWGPRshYfda

#!pip install pyngrok
from pyngrok import ngrok 
public_url = ngrok.connect(port='8501')
public_url

# Commented out IPython magic to ensure Python compatibility.
# %%writefile streamlit_app.py
# import pandas as pd
# import sqlite3
# import streamlit as st
# import plotly.express as px
# 
# connect = sqlite3.connect('Phonepe_pulse.db')
# df = pd.read_sql_query("SELECT * from agg_transaction", connect)
# 
# # Define a function to create the dashboard
# def create_dashboard():
#     st.title("PhonePe Pulse Dashboard")
#     
#     # Filter data based on user input
#     state = st.selectbox("Select a State", df['State'].unique())
#     year = st.selectbox("Select a Year", df['Year'].unique())
#     quarter = st.selectbox("Select a Quarter", df['Quarter'].unique())
#     
#     # Filter the data based on user input
#     filtered_df = df[(df['State'] == state) & (df['Year'] == year) & (df['Quarter'] == quarter)]
#     
#     # Create a bar chart to show transaction type distribution
#     fig = px.bar(filtered_df, x="Transaction_type", y="Transaction_amount", color="blue",
#                  height=500, title="Transaction Type Distribution")
#     st.plotly_chart(fig)
# 
# # Call the function to create the dashboard
# if __name__ == "__main__":
#     create_dashboard()
#

!streamlit run /content/streamlit_app.py & npx localtunnel -p 8501

